version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks in case of errors during infrastructure setup
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID}
          when: << parameters.when >>

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-deps


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-dependencies


  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-deps
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build


  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build


  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-deps
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results


  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: npm audit --audit-level=critical


  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-dependencies
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yaml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend
      - run:
          name: Save backend IP in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text)

            curl -H "Content-Type: text/plain" -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         #--tags project=your-tag \
      #         # --stack-name "your front-end stack name with workflow id" \
      #         # --parameter-overrides ID="your workflow id"
      #         exit 1
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       # Your code here
      #       exit 1
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure


  # deploy-infrastructure:
  #   executor: aws
  #   steps:
  #     - checkout
  #     - run:
  #         name: Deploy EC2 instance on AWS with aws cli
  #         working_directory: ./.circleci/files
  #         command: |
  #           aws cloudformation deploy \
  #             --stack-name udapeople-${CIRCLE_WORKFLOW_ID} \
  #             --template-file backend.yml \
  #             --parameter-overrides ID="udapeople" \
  #             --tags project=udapeople
  #     - destroy_environment:
  #         when: on_fail


  # configure-infrastructure:
  #   executor: python
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76"]
  #     - run:
  #         name: Install dependencies
  #         working_directory: ./.circleci/ansible
  #         command: |
  #           apk add --update ansible
  #           ansible --version
  #           pip install awscli
  #           aws --version
  #     - run:
  #         name: Save EC2 IP address in ansible inventory file
  #         working_directory: ./.circleci/ansible
  #         command: |
  #           aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:project,Values=udapeople" \
  #             --output text >> inventory
  #           cat inventory
  #     - run:
  #         name: Configure server
  #         working_directory: ./.circleci/ansible
  #         command: |
  #           pwd &&
  #           ls -la
  #           cat inventory
  #           ansible-playbook -i inventory deploy-server.yaml
  #     - destroy_environment:
  #         when: on_fail

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:

  smoke_test:
    executor: python
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test.
          command: |
            URL="https://google.com/"
            if curl -s --head ${URL} # test if google.com exists
            then
              return 0
            else
              return 1
            fi

#  cloudfront-update:

  create_and_deploy_front_end:
    executor: aws
    steps:
      - checkout
      - run:
          name: Create and deploy S3 frontend
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
            --template-file bucket.yaml \
            --stack-name "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Upload new Website Content
          working_directory: ./.circleci/files/website-content
          command: |
            aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID:0:7}"

  get_last_deployment_id:
    executor: aws
    steps:
      - checkout
      - run:
          name: Retrieve latest PipelineID from cloud formation and store it in memstash for later use
          working_directory: ./.circleci/files
          command: |
            PipelineID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request PUT --data "$PipelineID" https://api.memstash.io/values/PipelineID

  promote_to_production:
    executor: aws
    steps:
      - checkout
      - run:
          name: Update frontend production environment
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yaml \
            --stack-name udapeople-cloudfront-production \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

  clean_up_old_front_end:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldPipelineID=$(curl -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request GET https://api.memstash.io/values/PipelineID)
            CurrentPipelineID=${CIRCLE_WORKFLOW_ID:0:7}

            if [[ "$CurrentPipelineID" != "$OldPipelineID" ]]
            then
              echo "$OldPipelineID!=$CurrentPipelineID => will delete old version"

              aws s3 rm "s3://${OldPipelineID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-${OldPipelineID}"
            else
              echo "$OldPipelineID==$CurrentPipelineID => nothing to be done..."
            fi
          environment:
            TERM: xterm-256color

workflows:
  default:
    jobs:
      ## BUILD AND DEPLOY
      # - install-backend-dependencies
      # - install-frontend-dependencies

      # - build-backend:
      #     requires:
      #       - install-backend-dependencies
      # - build-frontend:
      #     requires:
      #       - install-frontend-dependencies
      # - test-backend:
      #     requires:
      #       -  build-backend
      # - test-frontend:
      #     requires:
      #       -  build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend

      ## INFRASTRUCTURE
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure

      # - create_and_deploy_front_end
      # - get_last_deployment_id:
      #     requires:
      #       - create_and_deploy_front_end
      # - promote_to_production:
      #     requires:
      #       - get_last_deployment_id
      # - clean_up_old_front_end:
      #     requires:
      #       - promote_to_production
