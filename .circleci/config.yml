version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks in case of errors during infrastructure setup
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-${CIRCLE_WORKFLOW_ID}
          when: << parameters.when >>

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-deps


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-dependencies


  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-deps
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build


  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build


  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-deps
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results


  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: frontend-dependencies
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: npm audit --audit-level=critical


  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: backend-dependencies
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Deploy EC2 instance on AWS with aws cli
          working_directory: ./.circleci
          command: |
            cd files
            aws cloudformation deploy \
              --stack-name udapeople-${CIRCLE_WORKFLOW_ID} \
              --template-file backend.yml \
              --parameter-overrides ID="udapeople" \
              --tags project=udapeople
      - run:
          name: Save EC2 IP address in ansible inventory file
          working_directory: ./.circleci
          command: |
            cd ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
            cat inventory
      - destroy_environment:
          when: on_fail
      - save_cache:
          paths:
            - .circleci/ansible
          key: ansible-deps


  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - restore_cache:
          key: ansible-deps
      - add_ssh_keys:
          fingerprints: ["06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76"]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            #pip install awscli
            #aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory deploy-server.yaml
      #- destroy_environment:
      #    when: on_fail

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:

  smoke_test:
    executor: python
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test.
          command: |
            URL="https://google.com/"
            if curl -s --head ${URL} # test if google.com exists
            then
              return 0
            else
              return 1
            fi

#  cloudfront-update:

workflows:
  default:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
